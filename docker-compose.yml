version: '3.8'

services:
  iam-database:
    image: 'mysql:latest'
    container_name: iam-database
    environment:
      MYSQL_ROOT_PASSWORD: 12345678
      MYSQL_DATABASE: iam-database
      MYSQL_USER: iamuser
      MYSQL_PASSWORD: iamsecure
    ports:
      - "3307:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - iam-database-data:/var/lib/mysql

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"

  kafka:
    image: bitnami/kafka:3.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_KRAFT_MODE=no
      - KAFKA_ENABLE_KRAFT=no
    ports:
      - "9092:9092"

  iam-service:
    build:
      context: .
      dockerfile: Services/IAMService/IAMService/Dockerfile
    container_name: iam-service
    depends_on:
      #      - kafka
      iam-database:
        condition: service_healthy
    #    environment:
    #      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    ports:
      - "8011:8011"
  
  locals-database:
    image: 'mysql:latest'
    container_name: locals-database
    environment:
      MYSQL_ROOT_PASSWORD: 12345678
      MYSQL_DATABASE: locals-database
      MYSQL_USER: localsuser
      MYSQL_PASSWORD: localssecure
    ports:
      - "3308:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - locals-database-data:/var/lib/mysql

  locals-service:
    build:
      context: .
      dockerfile: Services/LocalsService/LocalsService/Dockerfile
    container_name: locals-service
    depends_on:
      #      - kafka
      locals-database:
        condition: service_healthy
    #    environment:
    #      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    ports:
      - "8012:8012"
  
  booking-database:
    image: 'mysql:latest'
    container_name: booking-database
    environment:
      MYSQL_ROOT_PASSWORD: 12345678
      MYSQL_DATABASE: booking-database
      MYSQL_USER: bookinguser
      MYSQL_PASSWORD: bookingsecure
    ports:
      - "3309:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - booking-database-data:/var/lib/mysql

  booking-service:
    build:
      context: .
      dockerfile: Services/BookingService/BookingService/Dockerfile
    container_name: booking-service
    depends_on:
      kafka:
        condition: service_started
      booking-database:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - ASPNETCORE_ENVIRONMENT=Production
    ports:
      - "8013:8013"
  
  profiles-database:
    image: 'mysql:latest'
    container_name: profiles-database
    environment:
      MYSQL_ROOT_PASSWORD: 12345678
      MYSQL_DATABASE: profiles-database
      MYSQL_USER: profilesuser
      MYSQL_PASSWORD: profilessecure
    ports:
      - "3310:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - profiles-database-data:/var/lib/mysql
  
  profiles-service:
    build:
      context: .
      dockerfile: Services/ProfilesService/ProfilesService/Dockerfile
    container_name: profiles-service
    depends_on:
      #      - kafka
      profiles-database:
        condition: service_healthy
    #    environment:
    #      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    ports:
      - "8014:8014"
  
  notification-database:
    image: 'mysql:latest'
    container_name: notification-database
    environment:
      MYSQL_ROOT_PASSWORD: 12345678
      MYSQL_DATABASE: notification-database
      MYSQL_USER: notificationuser
      MYSQL_PASSWORD: notificationsecure
    ports:
      - "3311:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - notification-database-data:/var/lib/mysql
  
  notification-service:
    build:
      context: .
      dockerfile: Services/NotificationService/NotificationService/Dockerfile
    container_name: notification-service
    depends_on:
      kafka:
        condition: service_started
      notification-database:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - ASPNETCORE_ENVIRONMENT=Production
    ports:
      - "8015:8015"
  
  subscriptions-database:
    image: 'mysql:latest'
    container_name: subscriptions-database
    environment:
      MYSQL_ROOT_PASSWORD: 12345678
      MYSQL_DATABASE: subscriptions-database
      MYSQL_USER: subscriptionsuser
      MYSQL_PASSWORD: subscriptionssecure
    ports:
      - "3312:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - subscriptions-database-data:/var/lib/mysql
  
  subscriptions-service:
    build:
      context: .
      dockerfile: Services/SubscriptionsService/SubscriptionsService/Dockerfile
    container_name: subscriptions-service
    depends_on:
      #      - kafka
      subscriptions-database:
        condition: service_healthy
    #    environment:
    #      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    ports:
      - "8016:8016"

  communication-database:
    image: mongo:latest
    container_name: node-mongo-database
    ports:
      - "27017:27017"
    volumes:
      - communication-database-data:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 10
  
  communication-service:
    build:
      context: .
      dockerfile: Services/CommunicationService/Dockerfile
    container_name: communication-service
    depends_on:
      communication-database:
        condition: service_healthy
    environment:
      - MONGO_URL=mongodb://communication-database:27017/chat
      - NODE_ENV=production
    ports:
      - "8017:8017"

  api-gateway:
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    container_name: api-gateway
    depends_on:
      - iam-service
      - locals-service
      - booking-service
      - profiles-service
      - notification-service
      - subscriptions-service
      - communication-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    ports:
      - "8000:80"

volumes:
  iam-database-data:
  locals-database-data:
  booking-database-data:
  profiles-database-data:
  notification-database-data:
  subscriptions-database-data: